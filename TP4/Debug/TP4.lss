
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000055c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001509  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fa  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a73  00000000  00000000  0000262f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  000033fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f13  00000000  00000000  000039e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000048f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
   c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  24:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_9>
  28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_21>
  58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_clear_bss>:
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
  bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
  be:	a4 30       	cpi	r26, 0x04	; 4
  c0:	b2 07       	cpc	r27, r18
  c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
  c4:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
  c8:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <_exit>

000000cc <__bad_interrupt>:
  cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <ADCInit>:
}
uint16_t ADCGetRead(){
	return read;
}
void ADCSetRead(uint16_t new_read){
	read = new_read;
  d0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8f 6a       	ori	r24, 0xAF	; 175
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <ADCStart>:
  e0:	ea e7       	ldi	r30, 0x7A	; 122
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
  ea:	08 95       	ret

000000ec <ADCGetRead>:
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	08 95       	ret

000000f6 <__vector_21>:
}
ISR(ADC_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
	ADCSetRead(ADC);
 104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 108:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
uint16_t ADCGetRead(){
	return read;
}
void ADCSetRead(uint16_t new_read){
	read = new_read;
 10c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
ISR(ADC_vect){
	ADCSetRead(ADC);
}
 114:	9f 91       	pop	r25
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <LCDsendChar>:
{
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
	}
}
 122:	98 2f       	mov	r25, r24
 124:	90 7f       	andi	r25, 0xF0	; 240
 126:	9b b9       	out	0x0b, r25	; 11
 128:	58 9a       	sbi	0x0b, 0	; 11
 12a:	5a 9a       	sbi	0x0b, 2	; 11
 12c:	2d e0       	ldi	r18, 0x0D	; 13
 12e:	2a 95       	dec	r18
 130:	f1 f7       	brne	.-4      	; 0x12e <LCDsendChar+0xc>
 132:	00 00       	nop
 134:	5a 98       	cbi	0x0b, 2	; 11
 136:	58 98       	cbi	0x0b, 0	; 11
 138:	9d e0       	ldi	r25, 0x0D	; 13
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDsendChar+0x18>
 13e:	00 00       	nop
 140:	20 e1       	ldi	r18, 0x10	; 16
 142:	82 9f       	mul	r24, r18
 144:	c0 01       	movw	r24, r0
 146:	11 24       	eor	r1, r1
 148:	8b b9       	out	0x0b, r24	; 11
 14a:	58 9a       	sbi	0x0b, 0	; 11
 14c:	5a 9a       	sbi	0x0b, 2	; 11
 14e:	8d e0       	ldi	r24, 0x0D	; 13
 150:	8a 95       	dec	r24
 152:	f1 f7       	brne	.-4      	; 0x150 <LCDsendChar+0x2e>
 154:	00 00       	nop
 156:	5a 98       	cbi	0x0b, 2	; 11
 158:	58 98       	cbi	0x0b, 0	; 11
 15a:	9d e0       	ldi	r25, 0x0D	; 13
 15c:	9a 95       	dec	r25
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCDsendChar+0x3a>
 160:	00 00       	nop
 162:	08 95       	ret

00000164 <LCDsendCommand>:
 164:	98 2f       	mov	r25, r24
 166:	90 7f       	andi	r25, 0xF0	; 240
 168:	9b b9       	out	0x0b, r25	; 11
 16a:	5a 9a       	sbi	0x0b, 2	; 11
 16c:	e9 ef       	ldi	r30, 0xF9	; 249
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDsendCommand+0xc>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCDsendCommand+0x12>
 176:	00 00       	nop
 178:	5a 98       	cbi	0x0b, 2	; 11
 17a:	e9 ef       	ldi	r30, 0xF9	; 249
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDsendCommand+0x1a>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCDsendCommand+0x20>
 184:	00 00       	nop
 186:	f0 e1       	ldi	r31, 0x10	; 16
 188:	8f 9f       	mul	r24, r31
 18a:	c0 01       	movw	r24, r0
 18c:	11 24       	eor	r1, r1
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	5a 9a       	sbi	0x0b, 2	; 11
 192:	89 ef       	ldi	r24, 0xF9	; 249
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDsendCommand+0x32>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCDsendCommand+0x38>
 19c:	00 00       	nop
 19e:	5a 98       	cbi	0x0b, 2	; 11
 1a0:	e9 ef       	ldi	r30, 0xF9	; 249
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <LCDsendCommand+0x40>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <LCDsendCommand+0x46>
 1aa:	00 00       	nop
 1ac:	08 95       	ret

000001ae <LCDclr>:
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 b2 00 	call	0x164	; 0x164 <LCDsendCommand>
 1b4:	08 95       	ret

000001b6 <LCDGotoXY>:
 1b6:	62 30       	cpi	r22, 0x02	; 2
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <LCDGotoXY+0x10>
 1ba:	63 30       	cpi	r22, 0x03	; 3
 1bc:	31 f0       	breq	.+12     	; 0x1ca <LCDGotoXY+0x14>
 1be:	61 30       	cpi	r22, 0x01	; 1
 1c0:	29 f4       	brne	.+10     	; 0x1cc <LCDGotoXY+0x16>
 1c2:	80 5c       	subi	r24, 0xC0	; 192
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <LCDGotoXY+0x16>
 1c6:	8c 5e       	subi	r24, 0xEC	; 236
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <LCDGotoXY+0x16>
 1ca:	8c 5a       	subi	r24, 0xAC	; 172
 1cc:	80 68       	ori	r24, 0x80	; 128
 1ce:	0e 94 b2 00 	call	0x164	; 0x164 <LCDsendCommand>
 1d2:	08 95       	ret

000001d4 <LCDdefinechar>:
 1d4:	ff 92       	push	r15
 1d6:	0f 93       	push	r16
 1d8:	1f 93       	push	r17
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	66 0f       	add	r22, r22
 1e0:	66 0f       	add	r22, r22
 1e2:	66 0f       	add	r22, r22
 1e4:	60 64       	ori	r22, 0x40	; 64
 1e6:	ec 01       	movw	r28, r24
 1e8:	68 94       	set
 1ea:	ff 24       	eor	r15, r15
 1ec:	f3 f8       	bld	r15, 3
 1ee:	f6 0e       	add	r15, r22
 1f0:	fe 01       	movw	r30, r28
 1f2:	04 91       	lpm	r16, Z
 1f4:	11 e0       	ldi	r17, 0x01	; 1
 1f6:	16 0f       	add	r17, r22
 1f8:	86 2f       	mov	r24, r22
 1fa:	0e 94 b2 00 	call	0x164	; 0x164 <LCDsendCommand>
 1fe:	80 2f       	mov	r24, r16
 200:	0e 94 91 00 	call	0x122	; 0x122 <LCDsendChar>
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	61 2f       	mov	r22, r17
 208:	1f 11       	cpse	r17, r15
 20a:	f2 cf       	rjmp	.-28     	; 0x1f0 <LCDdefinechar+0x1c>
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	08 95       	ret

00000218 <LCDinit>:
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	85 ea       	ldi	r24, 0xA5	; 165
 220:	9e e0       	ldi	r25, 0x0E	; 14
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCDinit+0xa>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCDinit+0x10>
 228:	00 00       	nop
 22a:	1b b8       	out	0x0b, r1	; 11
 22c:	1b b8       	out	0x0b, r1	; 11
 22e:	8a b1       	in	r24, 0x0a	; 10
 230:	80 6f       	ori	r24, 0xF0	; 240
 232:	8a b9       	out	0x0a, r24	; 10
 234:	8a b1       	in	r24, 0x0a	; 10
 236:	87 60       	ori	r24, 0x07	; 7
 238:	8a b9       	out	0x0a, r24	; 10
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	8b b9       	out	0x0b, r24	; 11
 23e:	5a 9a       	sbi	0x0b, 2	; 11
 240:	e9 ef       	ldi	r30, 0xF9	; 249
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	31 97       	sbiw	r30, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <LCDinit+0x2c>
 248:	00 c0       	rjmp	.+0      	; 0x24a <LCDinit+0x32>
 24a:	00 00       	nop
 24c:	5a 98       	cbi	0x0b, 2	; 11
 24e:	e9 ef       	ldi	r30, 0xF9	; 249
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <LCDinit+0x3a>
 256:	00 c0       	rjmp	.+0      	; 0x258 <LCDinit+0x40>
 258:	00 00       	nop
 25a:	8b b9       	out	0x0b, r24	; 11
 25c:	5a 9a       	sbi	0x0b, 2	; 11
 25e:	89 ef       	ldi	r24, 0xF9	; 249
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCDinit+0x4a>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCDinit+0x50>
 268:	00 00       	nop
 26a:	5a 98       	cbi	0x0b, 2	; 11
 26c:	e9 ef       	ldi	r30, 0xF9	; 249
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <LCDinit+0x58>
 274:	00 c0       	rjmp	.+0      	; 0x276 <LCDinit+0x5e>
 276:	00 00       	nop
 278:	80 e2       	ldi	r24, 0x20	; 32
 27a:	8b b9       	out	0x0b, r24	; 11
 27c:	5a 9a       	sbi	0x0b, 2	; 11
 27e:	89 ef       	ldi	r24, 0xF9	; 249
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCDinit+0x6a>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCDinit+0x70>
 288:	00 00       	nop
 28a:	5a 98       	cbi	0x0b, 2	; 11
 28c:	e9 ef       	ldi	r30, 0xF9	; 249
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	31 97       	sbiw	r30, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCDinit+0x78>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCDinit+0x7e>
 296:	00 00       	nop
 298:	88 e2       	ldi	r24, 0x28	; 40
 29a:	0e 94 b2 00 	call	0x164	; 0x164 <LCDsendCommand>
 29e:	8c e0       	ldi	r24, 0x0C	; 12
 2a0:	0e 94 b2 00 	call	0x164	; 0x164 <LCDsendCommand>
 2a4:	c8 e6       	ldi	r28, 0x68	; 104
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	11 e0       	ldi	r17, 0x01	; 1
 2ac:	16 0f       	add	r17, r22
 2ae:	ce 01       	movw	r24, r28
 2b0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <LCDdefinechar>
 2b4:	28 96       	adiw	r28, 0x08	; 8
 2b6:	61 2f       	mov	r22, r17
 2b8:	18 30       	cpi	r17, 0x08	; 8
 2ba:	b9 f7       	brne	.-18     	; 0x2aa <LCDinit+0x92>
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	08 95       	ret

000002c4 <LCDescribeDato>:


//**********   Inicio de Comando Agregado por Fido

void LCDescribeDato(int val,unsigned int field_length)
{
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	0f 93       	push	r16
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <LCDescribeDato+0xe>
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <LCDescribeDato+0x10>
 2d4:	1f 92       	push	r1
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 2dc:	fe 01       	movw	r30, r28
 2de:	31 96       	adiw	r30, 0x01	; 1
 2e0:	25 e0       	ldi	r18, 0x05	; 5
 2e2:	df 01       	movw	r26, r30
 2e4:	1d 92       	st	X+, r1
 2e6:	2a 95       	dec	r18
 2e8:	e9 f7       	brne	.-6      	; 0x2e4 <LCDescribeDato+0x20>
	int i=4,j=0;
	while(val)
 2ea:	00 97       	sbiw	r24, 0x00	; 0
 2ec:	59 f0       	breq	.+22     	; 0x304 <LCDescribeDato+0x40>
 2ee:	35 96       	adiw	r30, 0x05	; 5
	{
	str[i]=val%10;
 2f0:	2a e0       	ldi	r18, 0x0A	; 10
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	b9 01       	movw	r22, r18
 2f6:	0e 94 3b 02 	call	0x476	; 0x476 <__divmodhi4>
 2fa:	82 93       	st	-Z, r24
	val=val/10;
 2fc:	86 2f       	mov	r24, r22
 2fe:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 300:	00 97       	sbiw	r24, 0x00	; 0
 302:	c1 f7       	brne	.-16     	; 0x2f4 <LCDescribeDato+0x30>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 304:	bf ef       	ldi	r27, 0xFF	; 255
 306:	eb 16       	cp	r14, r27
 308:	fb 06       	cpc	r15, r27
 30a:	69 f4       	brne	.+26     	; 0x326 <LCDescribeDato+0x62>
		while(str[j]==0) j++;
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	81 11       	cpse	r24, r1
 310:	1d c0       	rjmp	.+58     	; 0x34c <LCDescribeDato+0x88>
 312:	fe 01       	movw	r30, r28
 314:	32 96       	adiw	r30, 0x02	; 2
 316:	00 e0       	ldi	r16, 0x00	; 0
 318:	10 e0       	ldi	r17, 0x00	; 0
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	81 91       	ld	r24, Z+
 320:	88 23       	and	r24, r24
 322:	d9 f3       	breq	.-10     	; 0x31a <LCDescribeDato+0x56>
 324:	0f c0       	rjmp	.+30     	; 0x344 <LCDescribeDato+0x80>
	else
		j=5-field_length;
 326:	05 e0       	ldi	r16, 0x05	; 5
 328:	10 e0       	ldi	r17, 0x00	; 0
 32a:	0e 19       	sub	r16, r14
 32c:	1f 09       	sbc	r17, r15
 32e:	0a c0       	rjmp	.+20     	; 0x344 <LCDescribeDato+0x80>

	if(val<0) LCDsendChar('-');
	for(i=j;i<5;i++)
	{
	LCDsendChar(48+str[i]);
 330:	f8 01       	movw	r30, r16
 332:	81 91       	ld	r24, Z+
 334:	8f 01       	movw	r16, r30
 336:	80 5d       	subi	r24, 0xD0	; 208
 338:	0e 94 91 00 	call	0x122	; 0x122 <LCDsendChar>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDsendChar('-');
	for(i=j;i<5;i++)
 33c:	0e 15       	cp	r16, r14
 33e:	1f 05       	cpc	r17, r15
 340:	b9 f7       	brne	.-18     	; 0x330 <LCDescribeDato+0x6c>
 342:	11 c0       	rjmp	.+34     	; 0x366 <LCDescribeDato+0xa2>
 344:	05 30       	cpi	r16, 0x05	; 5
 346:	11 05       	cpc	r17, r1
 348:	1c f0       	brlt	.+6      	; 0x350 <LCDescribeDato+0x8c>
 34a:	0d c0       	rjmp	.+26     	; 0x366 <LCDescribeDato+0xa2>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 34c:	00 e0       	ldi	r16, 0x00	; 0
 34e:	10 e0       	ldi	r17, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	8c 0f       	add	r24, r28
 356:	9d 1f       	adc	r25, r29
 358:	08 0f       	add	r16, r24
 35a:	19 1f       	adc	r17, r25
 35c:	7e 01       	movw	r14, r28
 35e:	96 e0       	ldi	r25, 0x06	; 6
 360:	e9 0e       	add	r14, r25
 362:	f1 1c       	adc	r15, r1
 364:	e5 cf       	rjmp	.-54     	; 0x330 <LCDescribeDato+0x6c>
	if(val<0) LCDsendChar('-');
	for(i=j;i<5;i++)
	{
	LCDsendChar(48+str[i]);
	}
}
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	0f 90       	pop	r0
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	08 95       	ret

0000037e <main>:
#include "timer2.h"



int main(void)
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	00 d0       	rcall	.+0      	; 0x384 <main+0x6>
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
	DIDR0= 0x01;//ADC0 como analog input
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
	

	
	ADCInit();
 38e:	0e 94 68 00 	call	0xd0	; 0xd0 <ADCInit>
	LCDinit();
 392:	0e 94 0c 01 	call	0x218	; 0x218 <LCDinit>
	LCDclr();
 396:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCDclr>
	LCDGotoXY(0,0);
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCDGotoXY>
	TIMER2Init();
 3a2:	0e 94 07 02 	call	0x40e	; 0x40e <TIMER2Init>
	ADCStart();
 3a6:	0e 94 70 00 	call	0xe0	; 0xe0 <ADCStart>
	volatile int temp = 10;
 3aa:	8a e0       	ldi	r24, 0x0A	; 10
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	9a 83       	std	Y+2, r25	; 0x02
 3b0:	89 83       	std	Y+1, r24	; 0x01
	sei();
 3b2:	78 94       	sei
	
    while (1) 
    {
		if (TIMER2GetPrintFlag() == 2){
 3b4:	0e 94 19 02 	call	0x432	; 0x432 <TIMER2GetPrintFlag>
 3b8:	82 30       	cpi	r24, 0x02	; 2
 3ba:	11 f5       	brne	.+68     	; 0x400 <__LOCK_REGION_LENGTH__>
			//actualizo LCD
			temp = (ADCGetRead()*500UL)/1024;
 3bc:	0e 94 76 00 	call	0xec	; 0xec <ADCGetRead>
 3c0:	9c 01       	movw	r18, r24
 3c2:	a4 ef       	ldi	r26, 0xF4	; 244
 3c4:	b1 e0       	ldi	r27, 0x01	; 1
 3c6:	0e 94 4f 02 	call	0x49e	; 0x49e <__umulhisi3>
 3ca:	dc 01       	movw	r26, r24
 3cc:	cb 01       	movw	r24, r22
 3ce:	07 2e       	mov	r0, r23
 3d0:	7a e0       	ldi	r23, 0x0A	; 10
 3d2:	b6 95       	lsr	r27
 3d4:	a7 95       	ror	r26
 3d6:	97 95       	ror	r25
 3d8:	87 95       	ror	r24
 3da:	7a 95       	dec	r23
 3dc:	d1 f7       	brne	.-12     	; 0x3d2 <main+0x54>
 3de:	70 2d       	mov	r23, r0
 3e0:	9a 83       	std	Y+2, r25	; 0x02
 3e2:	89 83       	std	Y+1, r24	; 0x01
			LCDclr();
 3e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCDclr>
			LCDGotoXY(0,0);
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCDGotoXY>
			LCDescribeDato(temp,-1);
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	9a 81       	ldd	r25, Y+2	; 0x02
 3f4:	6f ef       	ldi	r22, 0xFF	; 255
 3f6:	7f ef       	ldi	r23, 0xFF	; 255
 3f8:	0e 94 62 01 	call	0x2c4	; 0x2c4 <LCDescribeDato>
			TIMER2ResetPrintFlag();
 3fc:	0e 94 1f 02 	call	0x43e	; 0x43e <TIMER2ResetPrintFlag>
		}
		if(TIMER2GetTempFlag() == 1){
 400:	0e 94 1c 02 	call	0x438	; 0x438 <TIMER2GetTempFlag>
 404:	81 30       	cpi	r24, 0x01	; 1
 406:	b1 f6       	brne	.-84     	; 0x3b4 <main+0x36>
			//verifico temp
			TIMER2ResetTempFlag();
 408:	0e 94 22 02 	call	0x444	; 0x444 <TIMER2ResetTempFlag>
 40c:	d3 cf       	rjmp	.-90     	; 0x3b4 <main+0x36>

0000040e <TIMER2Init>:
static uint8_t TEMP_FLAG = 0;
static uint8_t PRINT_FLAG = 0;

void TIMER2Init(){
/* interrupcion cada 0,5s*/
	ASSR|= (1<<AS2) ;
 40e:	e6 eb       	ldi	r30, 0xB6	; 182
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	80 62       	ori	r24, 0x20	; 32
 416:	80 83       	st	Z, r24
	TCCR2A =0x00;
 418:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B |= (1<<CS21) | (1<<CS20);//preescalador 32 T = 0,25s
 41c:	e1 eb       	ldi	r30, 0xB1	; 177
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	83 60       	ori	r24, 0x03	; 3
 424:	80 83       	st	Z, r24
	TIMSK2 |=  (1<<TOIE2);
 426:	e0 e7       	ldi	r30, 0x70	; 112
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	81 60       	ori	r24, 0x01	; 1
 42e:	80 83       	st	Z, r24
 430:	08 95       	ret

00000432 <TIMER2GetPrintFlag>:
}
uint8_t TIMER2GetPrintFlag(){
	return PRINT_FLAG;
}
 432:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PRINT_FLAG>
 436:	08 95       	ret

00000438 <TIMER2GetTempFlag>:
uint8_t TIMER2GetTempFlag(){
	return TEMP_FLAG;
}
 438:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TEMP_FLAG>
 43c:	08 95       	ret

0000043e <TIMER2ResetPrintFlag>:

void TIMER2ResetPrintFlag(){
	PRINT_FLAG =0;
 43e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <PRINT_FLAG>
 442:	08 95       	ret

00000444 <TIMER2ResetTempFlag>:
}
void TIMER2ResetTempFlag(){
	TEMP_FLAG =0;
 444:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <TEMP_FLAG>
 448:	08 95       	ret

0000044a <__vector_9>:
}
ISR (TIMER2_OVF_vect)
{
 44a:	1f 92       	push	r1
 44c:	0f 92       	push	r0
 44e:	0f b6       	in	r0, 0x3f	; 63
 450:	0f 92       	push	r0
 452:	11 24       	eor	r1, r1
 454:	8f 93       	push	r24
	TEMP_FLAG++;
 456:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TEMP_FLAG>
 45a:	8f 5f       	subi	r24, 0xFF	; 255
 45c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <TEMP_FLAG>
	PRINT_FLAG++;
 460:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <PRINT_FLAG>
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <PRINT_FLAG>
 46a:	8f 91       	pop	r24
 46c:	0f 90       	pop	r0
 46e:	0f be       	out	0x3f, r0	; 63
 470:	0f 90       	pop	r0
 472:	1f 90       	pop	r1
 474:	18 95       	reti

00000476 <__divmodhi4>:
 476:	97 fb       	bst	r25, 7
 478:	07 2e       	mov	r0, r23
 47a:	16 f4       	brtc	.+4      	; 0x480 <__divmodhi4+0xa>
 47c:	00 94       	com	r0
 47e:	07 d0       	rcall	.+14     	; 0x48e <__divmodhi4_neg1>
 480:	77 fd       	sbrc	r23, 7
 482:	09 d0       	rcall	.+18     	; 0x496 <__divmodhi4_neg2>
 484:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__udivmodhi4>
 488:	07 fc       	sbrc	r0, 7
 48a:	05 d0       	rcall	.+10     	; 0x496 <__divmodhi4_neg2>
 48c:	3e f4       	brtc	.+14     	; 0x49c <__divmodhi4_exit>

0000048e <__divmodhi4_neg1>:
 48e:	90 95       	com	r25
 490:	81 95       	neg	r24
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	08 95       	ret

00000496 <__divmodhi4_neg2>:
 496:	70 95       	com	r23
 498:	61 95       	neg	r22
 49a:	7f 4f       	sbci	r23, 0xFF	; 255

0000049c <__divmodhi4_exit>:
 49c:	08 95       	ret

0000049e <__umulhisi3>:
 49e:	a2 9f       	mul	r26, r18
 4a0:	b0 01       	movw	r22, r0
 4a2:	b3 9f       	mul	r27, r19
 4a4:	c0 01       	movw	r24, r0
 4a6:	a3 9f       	mul	r26, r19
 4a8:	70 0d       	add	r23, r0
 4aa:	81 1d       	adc	r24, r1
 4ac:	11 24       	eor	r1, r1
 4ae:	91 1d       	adc	r25, r1
 4b0:	b2 9f       	mul	r27, r18
 4b2:	70 0d       	add	r23, r0
 4b4:	81 1d       	adc	r24, r1
 4b6:	11 24       	eor	r1, r1
 4b8:	91 1d       	adc	r25, r1
 4ba:	08 95       	ret

000004bc <__udivmodhi4>:
 4bc:	aa 1b       	sub	r26, r26
 4be:	bb 1b       	sub	r27, r27
 4c0:	51 e1       	ldi	r21, 0x11	; 17
 4c2:	07 c0       	rjmp	.+14     	; 0x4d2 <__udivmodhi4_ep>

000004c4 <__udivmodhi4_loop>:
 4c4:	aa 1f       	adc	r26, r26
 4c6:	bb 1f       	adc	r27, r27
 4c8:	a6 17       	cp	r26, r22
 4ca:	b7 07       	cpc	r27, r23
 4cc:	10 f0       	brcs	.+4      	; 0x4d2 <__udivmodhi4_ep>
 4ce:	a6 1b       	sub	r26, r22
 4d0:	b7 0b       	sbc	r27, r23

000004d2 <__udivmodhi4_ep>:
 4d2:	88 1f       	adc	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	5a 95       	dec	r21
 4d8:	a9 f7       	brne	.-22     	; 0x4c4 <__udivmodhi4_loop>
 4da:	80 95       	com	r24
 4dc:	90 95       	com	r25
 4de:	bc 01       	movw	r22, r24
 4e0:	cd 01       	movw	r24, r26
 4e2:	08 95       	ret

000004e4 <_exit>:
 4e4:	f8 94       	cli

000004e6 <__stop_program>:
 4e6:	ff cf       	rjmp	.-2      	; 0x4e6 <__stop_program>
